version: '3.7'
x-environment:
  &default-environment
  - REDIS_HOST=redis
  - REDIS_PORT=6379
  - REDIS_PASSWORD=$REDIS_PASS
  - MONGO_HOST=mongo
  - MONGO_PASS=$MONGO_PASS
  - MONGODB=mongo:27017
  - ACCESS_SECRET=$ACCESS_SECRET
  - REFRESH_SECRET=$REFRESH_SECRET

services:
  traefik:
    image: traefik:v2.6
    container_name: "traefik"
    command:
      # - "--log.level=DEBUG"
      - "--api=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--certificatesresolvers.tlsresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.tlsresolver.acme.email=ivanhahanov13@gmail.com"
      - "--certificatesresolvers.tlsresolver.acme.storage=acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./.htpasswd:/etc/traefik/.htpasswd"
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls.certresolver=tlsresolver"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.middlewares.auth.basicauth.usersfile=/etc/traefik/.htpasswd"
      - "traefik.http.routers.dashboard.middlewares=auth"
      

  auth:
    image: explabs/potee-auth
    container_name: "auth"
    environment: *default-environment
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=Host(`api.${DOMAIN}`) && PathPrefix(`/api/v1/auth`)"
      - "traefik.http.routers.auth.entrypoints=websecure"
      - "traefik.http.routers.auth.tls.certresolver=tlsresolver"
      - "traefik.http.middlewares.auth-strip.stripprefix.prefixes=/api/v1/auth"
      - "traefik.http.middlewares.auth-strip.stripprefix.forceslash=true"
      - "traefik.http.services.auth.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.serviceheaders.headers.accessControlallowheaders=Content-Type"
      - "traefik.http.middlewares.serviceheaders.headers.accesscontrolalloworiginlist=*" 
      - "traefik.http.middlewares.serviceheaders.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST,DELETE"
      - "traefik.http.middlewares.serviceheaders.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.serviceheaders.headers.addvaryheader=true"
      - "traefik.http.routers.auth.middlewares=auth-strip,serviceheaders"
    depends_on:
      mongo:
        condition: service_healthy

  entities:
    image: explabs/potee-entities
    container_name: "entities"
    environment: *default-environment
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.entities.rule=Host(`api.${DOMAIN}`) && PathPrefix(`/api/v1/entities`)"
      - "traefik.http.routers.entities.entrypoints=websecure"
      - "traefik.http.routers.entities.tls.certresolver=tlsresolver"
      - "traefik.http.middlewares.entities-strip.stripprefix.prefixes=/api/v1/entities"
      - "traefik.http.middlewares.entities-strip.stripprefix.forceslash=true"
      - "traefik.http.services.entities.loadbalancer.server.port=8080"
      - "traefik.http.routers.entities.middlewares=entities-strip,serviceheaders"
    depends_on:
      mongo:
        condition: service_healthy

  scores:
    image: explabs/potee-scores
    container_name: scores
    environment:
      - MONGO_HOST=mongo
      - MONGO_PASS=$MONGO_PASS
      - ACCESS_SECRET=$ACCESS_SECRET
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.scores.rule=Host(`api.${DOMAIN}`) && PathPrefix(`/api/v1/scores`)"
      - "traefik.http.routers.scores.entrypoints=websecure"
      - "traefik.http.routers.scores.tls.certresolver=tlsresolver"
      - "traefik.http.middlewares.scores-strip.stripprefix.prefixes=/api/v1/scores"
      - "traefik.http.middlewares.scores-strip.stripprefix.forceslash=true"
      - "traefik.http.services.scores.loadbalancer.server.port=8080"
      - "traefik.http.routers.scores.middlewares=scores-strip,serviceheaders"
    depends_on:
      mongo:
        condition: service_healthy

  admin:
    image: explabs/potee-admin
    container_name: "admin"
    environment:
      - ADMIN_PASS=$ADMIN_PASS
      - MONGO_HOST=mongo
      - MONGO_PASS=$MONGO_PASS
      - REDIS_HOST=redis
      - REDIS_PASSWORD=$REDIS_PASS
      - ACCESS_SECRET=$ACCESS_SECRET
      - MINIO_HOST=minio:9000
      - MINIO_ACCESS_KEY=potee
      - MINIO_SECRET_KEY=$MINIO_PASS
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=Host(`api.${DOMAIN}`) && PathPrefix(`/api/v1/admin`)"
      - "traefik.http.routers.admin.entrypoints=websecure"
      - "traefik.http.routers.admin.tls.certresolver=tlsresolver"
      - "traefik.http.middlewares.admin-strip.stripprefix.prefixes=/api/v1/admin"
      - "traefik.http.middlewares.admin-strip.stripprefix.forceslash=true"
      - "traefik.http.services.admin.loadbalancer.server.port=8080"
      - "traefik.http.routers.admin.middlewares=admin-strip,serviceheaders"
      
    volumes:
      - ./scenario.yml:/usr/app/scenario.yml
      - ./scripts/:/usr/app/scripts/
    depends_on:
      mongo:
        condition: service_healthy
      minio:
        condition: service_healthy

  manager:
    image: explabs/potee-manager
    container_name: "manager"
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=services
      - RABBITMQ_PASS=$RABBITMQ_PASS
      - MONGO_HOST=mongo
      - MONGO_PASS=$MONGO_PASS
      - REDIS_HOST=redis
      - REDIS_PASSWORD=$REDIS_PASS
      - ACCESS_SECRET=$ACCESS_SECRET
      - PYTHONUNBUFFERED=1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.manager.rule=Host(`api.${DOMAIN}`) && PathPrefix(`/api/v1/scenario`)"
      - "traefik.http.routers.manager.entrypoints=websecure"
      - "traefik.http.routers.manager.tls.certresolver=tlsresolver"
      - "traefik.http.middlewares.manager-strip.stripprefix.prefixes=/api/v1/scenario"
      - "traefik.http.middlewares.manager-strip.stripprefix.forceslash=true"
      - "traefik.http.services.manager.loadbalancer.server.port=8000"
      - "traefik.http.routers.manager.middlewares=manager-strip,serviceheaders"
    depends_on:
      rabbitmq:
        condition: service_healthy

  runner:
    image: explabs/potee-runner
    container_name: "runner"
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=services
      - RABBITMQ_PASS=$RABBITMQ_PASS
      - MINIO_HOST=minio:9000
      - MINIO_ACCESS_KEY=potee
      - MINIO_SECRET_KEY=$MINIO_PASS
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./requirements.txt:/usr/app/requirements.txt

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    environment:
      - RABBITMQ_DEFAULT_USER=services
      - RABBITMQ_DEFAULT_PASS=$RABBITMQ_PASS
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 20s
      retries: 3

  minio:
    image: quay.io/minio/minio
    container_name: "minio"
    command: server --console-address ":9001" /data
    expose:
      - "9000"
      - "9001"
    environment:
      MINIO_ROOT_USER: potee
      MINIO_ROOT_PASSWORD: $MINIO_PASS
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:9000/minio/health/live"
        ]
      interval: 30s
      timeout: 20s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`minio.${DOMAIN}`)"
      - "traefik.http.routers.minio.entrypoints=websecure"
      - "traefik.http.routers.minio.tls.certresolver=tlsresolver"
      - "traefik.http.services.minio.loadbalancer.server.port=9000"

  redis:
    image: "redis:alpine"
    container_name: "redis"
    command: 'redis-server --requirepass ${REDIS_PASS}'

  mongo:
    image: mongo:5.0
    container_name: mongo
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASS
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  openvpn:
    image: flant/ovpn-admin:openvpn-1.7.5
    container_name: openvpn
    command: /etc/openvpn/setup/configure.sh
    environment:
      OVPN_SERVER_NET: "192.168.100.0"
      OVPN_SERVER_MASK: "255.255.255.0"
    cap_add:
      - NET_ADMIN
    ports:
      - 7777:1194 # for openvpn
    volumes:
      - ./openvpn/easyrsa_master:/etc/openvpn/easyrsa
      - ./openvpn/ccd_master:/etc/openvpn/ccd
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.openvpn.rule=Host(`vpn.${DOMAIN}`)"
      - "traefik.http.routers.openvpn.tls.certresolver=tlsresolver"
      - "traefik.http.routers.openvpn.middlewares=auth"
      - "traefik.http.routers.openvpn.entrypoints=websecure"
      - "traefik.http.services.openvpn.loadbalancer.server.port=9000"

  ovpn-admin:
    image: flant/ovpn-admin:1.7.5
    container_name: ovpn-admin
    command: /app/ovpn-admin
    environment:
      OVPN_LISTEN_PORT: "9000"
      OVPN_DEBUG: "True"
      OVPN_VERBOSE: "True"
      OVPN_NETWORK: "192.168.100.0/24"
      EASYRSA_PATH: "/mnt/easyrsa"
      OVPN_SERVER: "vpn.${DOMAIN}:7777:tcp"
      OVPN_INDEX_PATH: "/mnt/easyrsa/pki/index.txt"
      OVPN_CCD: "True"
      OVPN_CCD_PATH: "/mnt/ccd"
    network_mode: service:openvpn
    volumes:
      - ./openvpn/easyrsa_master:/mnt/easyrsa
      - ./openvpn/ccd_master:/mnt/ccd